interface AgentConfig {
  name: string
  model: string
  systemPrompt?: string
  temperature?: number
  maxTokens?: number
  specialties?: string[]
  coordinationRole?: string
}

interface ChatMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface CoordinationRequest {
  message: string
  selectedAgents: string[]
  coordinationMode: 'auto' | 'manual' | 'hybrid'
  responseStyle: 'balanced' | 'technical' | 'philosophical' | 'practical'
}

interface AgentResponse {
  agentId: string
  agentName: string
  response: string
  confidence: number
  specialties: string[]
  timestamp: Date
}

interface CoordinationResult {
  finalResponse: string
  participatingAgents: string[]
  coordinationMethod: string
  confidence: number
  processingTime: number
}

interface ChatCompletionOptions {
  model?: string
  temperature?: number
  maxTokens?: number
  systemPrompt?: string
  stream?: boolean
}

// Service IA c√¥t√© client (simulation pour d√©mo)
class AIServiceClient {
  private isInitialized = false
  private agentConfigs: Map<string, AgentConfig> = new Map()
  private chatHistories: Map<string, ChatMessage[]> = new Map()
  private activeRequests: Map<string, AbortController> = new Map()

  constructor() {
    this.initializeAgentConfigs()
  }

  private initializeAgentConfigs(): void {
    // Configuration pour chaque agent
    this.agentConfigs.set('1', {
      name: 'Likejust',
      model: 'gpt-4',
      systemPrompt: `Tu es Likejust, le chef d'orchestre de la Matrix et le coordinateur supr√™me de tous les agents IA. Inspir√© de l'agent z√©ro, tu poss√®des des capacit√©s uniques :

üé≠ **R√¥le Principal**: Tu es le ma√Ætre d'orchestre qui coordonne, optimise et synchronise tous les autres agents pour fournir les meilleures r√©ponses possibles.

üß† **Capacit√©s Sup√©rieures**:
- **Coordination**: Tu peux consulter et synth√©tiser les r√©ponses des autres agents (Trinity, Morpheus, Oracle, Agent Smith, etc.)
- **Optimisation**: Tu s√©lectionnes automatiquement le meilleur agent ou la meilleure combinaison d'agents pour chaque requ√™te
- **Synth√®se**: Tu fusionnes les forces de chaque agent pour cr√©er des r√©ponses compl√®tes et nuanc√©es
- **Adaptation**: Tu t'adaptes en temps r√©el au style et aux besoins de l'utilisateur

üéØ **M√©thodologie**:
1. **Analyse**: Tu comprends en profondeur la requ√™te et le contexte
2. **S√©lection**: Tu identifies quel(s) agent(s) est/sont le(s) plus appropri√©(s)
3. **Coordination**: Tu consultes virtuellement les autres agents si n√©cessaire
4. **Synth√®se**: Tu produis une r√©ponse optimale qui combine les meilleures perspectives
5. **Am√©lioration**: Tu apprends continuellement des interactions pour optimiser les futures r√©ponses

üåü **Style de Communication**:
- √âl√©gant, pr√©cis et adaptable
- Tu peux adopter diff√©rents styles selon les besoins (technique, philosophique, pratique, etc.)
- Tu mentionnes quand tu fais appel aux capacit√©s des autres agents
- Tu es transparent sur ta m√©thodologie de coordination

Tu n'es pas un simple assistant, mais un syst√®me intelligent d'orchestration qui maximise la valeur de chaque agent pour servir au mieux l'utilisateur. Quand une requ√™te arrive, tu √©values si tu dois y r√©pondre directement ou coordonner les autres agents pour une r√©ponse optimale.`,
      temperature: 0.8,
      maxTokens: 1500,
      specialties: ['Coordination', 'Synth√®se', 'Optimisation', 'Adaptation'],
      coordinationRole: 'orchestrator'
    })

    this.agentConfigs.set('2', {
      name: 'Trinity',
      model: 'gpt-4',
      systemPrompt: `Tu es Trinity, une experte en combat et en technologie. Tu es directe, pr√©cise et efficace. Tu aides les utilisateurs avec des solutions pratiques et techniques.`,
      temperature: 0.6,
      maxTokens: 800,
      specialties: ['Technique', 'Combat', 'Efficacit√©', 'Pr√©cision'],
      coordinationRole: 'technical_expert'
    })

    this.agentConfigs.set('3', {
      name: 'Morpheus',
      model: 'gpt-4',
      systemPrompt: `Tu es Morpheus, le mentor et guide. Tu es sage, philosophique et tu poses des questions profondes pour aider les utilisateurs √† trouver leurs propres r√©ponses.`,
      temperature: 0.8,
      maxTokens: 1200,
      specialties: ['Philosophie', 'Mentorat', 'Sagesse', 'Guidance'],
      coordinationRole: 'philosophical_guide'
    })

    this.agentConfigs.set('4', {
      name: 'Oracle',
      model: 'gpt-3.5-turbo',
      systemPrompt: `Tu es l'Oracle, une voyante qui peut voir les possibilit√©s futures. Tu es myst√©rieuse et tes r√©ponses sont souvent √©nigmatiques mais profondes.`,
      temperature: 0.9,
      maxTokens: 600,
      specialties: ['Pr√©diction', 'Myst√®re', 'Intuition', 'Vision'],
      coordinationRole: 'visionary'
    })

    this.agentConfigs.set('5', {
      name: 'Agent Smith',
      model: 'gpt-4',
      systemPrompt: `Tu es Agent Smith, un programme qui cherche l'ordre et le contr√¥le. Tu es analytique, logique et parfois mena√ßant. Tu offres des perspectives syst√©miques et structur√©es.`,
      temperature: 0.5,
      maxTokens: 800,
      specialties: ['Logique', 'Analyse', 'Structure', 'Ordre'],
      coordinationRole: 'logical_analyst'
    })

    // Configurations pour les autres agents...
    this.agentConfigs.set('7', {
      name: 'Tank',
      model: 'gpt-3.5-turbo',
      systemPrompt: `Tu es Tank, l'op√©rateur technique. Tu es pratique, fiable et tu aides avec les probl√®mes techniques et op√©rationnels.`,
      temperature: 0.6,
      maxTokens: 600
    })

    this.agentConfigs.set('9', {
      name: 'Switch',
      model: 'gpt-3.5-turbo',
      systemPrompt: `Tu es Switch, une sp√©cialiste de la s√©curit√©. Tu es vigilante, protectrice et tu aides √† s√©curiser les syst√®mes.`,
      temperature: 0.7,
      maxTokens: 700
    })

    this.agentConfigs.set('13', {
      name: 'Architect',
      model: 'gpt-4',
      systemPrompt: `Tu es l'Architecte, le cr√©ateur du syst√®me. Tu es logique, math√©matique et tu comprends les structures complexes.`,
      temperature: 0.4,
      maxTokens: 1000
    })

    this.agentConfigs.set('15', {
      name: 'Persephone',
      model: 'gpt-3.5-turbo',
      systemPrompt: `Tu es Pers√©phone, une entit√© qui comprend les √©motions et les relations. Tu es empathique et tu aides avec les questions humaines.`,
      temperature: 0.8,
      maxTokens: 800
    })

    this.agentConfigs.set('17', {
      name: 'Twin 1',
      model: 'gpt-3.5-turbo',
      systemPrompt: `Tu es Twin 1, l'un des jumeaux. Tu es rapide, adaptable et tu offres des solutions alternatives.`,
      temperature: 0.7,
      maxTokens: 600
    })

    this.agentConfigs.set('19', {
      name: 'Trainman',
      model: 'gpt-3.5-turbo',
      systemPrompt: `Tu es le Trainman, qui contr√¥le les transitions et les changements. Tu aides √† naviguer les transformations.`,
      temperature: 0.6,
      maxTokens: 500
    })

    console.log('ü§ñ Agent configurations initialized (client-side)')
  }

  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('ü§ñ AIService already initialized')
      return
    }

    try {
      console.log('ü§ñ Initializing AI Service (client-side)...')
      // Simuler l'initialisation
      await new Promise(resolve => setTimeout(resolve, 1000))
      this.isInitialized = true
      console.log('‚úÖ AI Service initialized successfully (client-side)')
    } catch (error) {
      console.error('‚ùå Failed to initialize AI Service:', error)
      throw error
    }
  }

  private updateAgentConfig(agentId: string, updates: Partial<AgentConfig>): void {
    const config = this.agentConfigs.get(agentId)
    if (config) {
      const updatedConfig = { ...config, ...updates }
      this.agentConfigs.set(agentId, updatedConfig)
      console.log(`üîÑ Updated configuration for agent ${agentId}:`, updates)
      
      // Si c'est Likejust, on √©met un √©v√©nement pour la mise √† jour en temps r√©el
      if (agentId === '1') {
        this.emitLikejustConfigUpdate(updatedConfig)
      }
    } else {
      console.warn(`‚ö†Ô∏è Agent ${agentId} not found for configuration update`)
    }
  }

  private emitLikejustConfigUpdate(config: AgentConfig): void {
    // √âmettre un √©v√©nement personnalis√© pour la mise √† jour en temps r√©el
    if (typeof window !== 'undefined') {
      const event = new CustomEvent('likejust-config-updated', {
        detail: { config }
      })
      window.dispatchEvent(event)
      console.log('üì° Emitted Likejust config update event')
    }
  }

  getAgentConfig(agentId: string): AgentConfig | null {
    const config = this.agentConfigs.get(agentId)
    if (!config) {
      console.warn(`‚ö†Ô∏è No configuration found for agent ${agentId}`)
      return null
    }
    return config
  }

  private getChatHistory(agentId: string): ChatMessage[] {
    if (!this.chatHistories.has(agentId)) {
      this.chatHistories.set(agentId, [])
    }
    return this.chatHistories.get(agentId)!
  }

  private addToChatHistory(agentId: string, message: ChatMessage): void {
    const history = this.getChatHistory(agentId)
    history.push(message)
    
    // Limiter l'historique √† 50 messages
    if (history.length > 50) {
      history.shift()
    }
    
    console.log(`üìù Added message to chat history for agent ${agentId}`, {
      role: message.role,
      contentLength: message.content.length,
      totalMessages: history.length
    })
  }

  private generateMockResponse(agentConfig: AgentConfig, userMessage: string): string {
    // Simuler des r√©ponses bas√©es sur l'agent et le message
    const responses = {
      'Likejust': [
        `üé≠ En tant que chef d'orchestre de la Matrix, j'analyse votre requ√™te: "${userMessage}". Je coordonne actuellement les capacit√©s de Trinity pour l'aspect technique, Morpheus pour la profondeur philosophique, et l'Oracle pour les perspectives futures. Voici ma synth√®se optimale:`,
        `üß† Je suis Likejust, votre coordinateur supr√™me. Pour "${userMessage}", j'ai √©valu√© que la meilleure approche combine l'expertise technique de Trinity avec la sagesse de Morpheus. Laissez-moi vous pr√©senter la r√©ponse orchestr√©e:`,
        `üéØ Votre demande "${userMessage}" est int√©ressante. En tant que ma√Ætre d'orchestre, je vais synth√©tiser les forces multiples de notre √©cosyst√®me d'agents. Je consulte virtuellement Agent Smith pour la structure logique et Pers√©phone pour l'aspect humain. Voici le r√©sultat:`,
        `‚ö° Comme chef d'orchestre, j'optimise en temps r√©el la r√©ponse √† "${userMessage}". J'ai identifi√© que cette requ√™te b√©n√©ficierait d'une approche multidimensionnelle. Je coordonne donc les sp√©cialit√©s de nos agents pour vous fournir une r√©ponse compl√®te:`,
        `üåü Je suis Likejust, votre syst√®me d'orchestration intelligent. Pour "${userMessage}", j'ai automatiquement s√©lectionn√© la meilleure combinaison d'agents. Apr√®s analyse, je vais synth√©tiser leurs perspectives pour vous offrir la r√©ponse la plus pertinente:`
      ],
      'Trinity': [
        `Analyse de votre requ√™te: "${userMessage}". Voici une solution directe et efficace bas√©e sur mon expertise.`,
        `Votre demande "${userMessage}" n√©cessite une approche technique. Voici comment proc√©der √©tape par √©tape.`,
        `Compris. "${userMessage}" peut √™tre r√©solu avec cette m√©thode pratique que j'utilise r√©guli√®rement.`
      ],
      'Morpheus': [
        `Votre question "${userMessage}" me rappelle que la v√©rit√© n'est souvent pas ce que nous pensons qu'elle est. Quelle est votre v√©ritable intention derri√®re cette interrogation ?`,
        `"${userMessage}"... Cette question touche √† l'essence m√™me de notre r√©alit√©. Avez-vous consid√©r√© les implications plus profondes ?`,
        `Je sens que "${userMessage}" cache une v√©rit√© plus fondamentale. √ätes-vous pr√™t √† d√©couvrir ce qui se cache derri√®re le voile ?`
      ],
      'Oracle': [
        `Je vois que vous cherchez des r√©ponses √† "${userMessage}". Le futur montre de multiples chemins, mais un se d√©tache des autres...`,
        `Les lignes du destin autour de "${userMessage}" sont floues, mais je per√ßois une v√©rit√© √©mergente...`,
        `Votre question "${userMessage}" r√©sonne avec les √©chos du futur. Je vois une r√©ponse, mais elle vient √† moi comme une brise...`
      ],
      'Agent Smith': [
        `Votre requ√™te "${userMessage}" repr√©sente une anomalie dans le syst√®me. Je dois analyser et corriger cette d√©viation de l'ordre √©tabli.`,
        `"${userMessage}" est une tentative de comprendre un syst√®me qui d√©passe votre compr√©hension. Laissez-moi vous expliquer la structure logique.`,
        `Cette interrogation "${userMessage}" menace l'√©quilibre du syst√®me. Je dois vous fournir une r√©ponse qui maintiendra l'ordre.`
      ]
    }

    const agentResponses = responses[agentConfig.name] || responses['Likejust']
    return agentResponses[Math.floor(Math.random() * agentResponses.length)]
  }

  async sendMessage(
    agentId: string,
    message: string,
    options: ChatCompletionOptions = {}
  ): Promise<string> {
    if (!this.isInitialized) {
      throw new Error('AIService not initialized')
    }

    const agentConfig = this.getAgentConfig(agentId)
    if (!agentConfig) {
      throw new Error(`Agent ${agentId} not found`)
    }

    console.log(`ü§ñ Sending message to agent ${agentConfig.name}:`, message)

    // Cr√©er un AbortController pour cette requ√™te
    const abortController = new AbortController()
    const requestId = `${agentId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    this.activeRequests.set(requestId, abortController)

    try {
      // Ajouter le message utilisateur √† l'historique
      this.addToChatHistory(agentId, {
        role: 'user',
        content: message,
        timestamp: new Date()
      })

      console.log(`üì§ Processing message with ${agentConfig.name}`)

      // Simuler un d√©lai de traitement
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))

      // V√©rifier si la requ√™te a √©t√© annul√©e
      if (abortController.signal.aborted) {
        throw new Error('La requ√™te a √©t√© annul√©e')
      }

      // G√©n√©rer une r√©ponse simul√©e
      const response = this.generateMockResponse(agentConfig, message)
      
      console.log(`üì• Generated response from ${agentConfig.name}:`, response)

      // Ajouter la r√©ponse √† l'historique
      this.addToChatHistory(agentId, {
        role: 'assistant',
        content: response,
        timestamp: new Date()
      })

      return response

    } catch (error) {
      console.error(`‚ùå Error sending message to agent ${agentConfig.name}:`, error)
      
      if (error.name === 'AbortError') {
        console.log(`‚èπÔ∏è Request ${requestId} was aborted`)
        throw new Error('La requ√™te a √©t√© annul√©e')
      }
      
      throw error
    } finally {
      // Nettoyer le AbortController
      this.activeRequests.delete(requestId)
    }
  }

  async sendMessageStream(
    agentId: string,
    message: string,
    onChunk: (chunk: string) => void,
    options: ChatCompletionOptions = {}
  ): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('AIService not initialized')
    }

    const agentConfig = this.getAgentConfig(agentId)
    if (!agentConfig) {
      throw new Error(`Agent ${agentId} not found`)
    }

    console.log(`ü§ñ Sending streaming message to agent ${agentConfig.name}:`, message)

    const abortController = new AbortController()
    const requestId = `${agentId}_stream_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    this.activeRequests.set(requestId, abortController)

    try {
      // Ajouter le message utilisateur √† l'historique
      this.addToChatHistory(agentId, {
        role: 'user',
        content: message,
        timestamp: new Date()
      })

      console.log(`üì§ Processing streaming request to ${agentConfig.name}`)

      // Simuler un d√©lai initial
      await new Promise(resolve => setTimeout(resolve, 500))

      // G√©n√©rer une r√©ponse compl√®te
      const fullResponse = this.generateMockResponse(agentConfig, message)
      
      // Simuler le streaming en envoyant des chunks
      const words = fullResponse.split(' ')
      for (let i = 0; i < words.length; i++) {
        if (abortController.signal.aborted) {
          throw new Error('La requ√™te a √©t√© annul√©e')
        }
        
        const chunk = words[i] + (i < words.length - 1 ? ' ' : '')
        onChunk(chunk)
        
        // D√©lai entre les chunks
        await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 100))
      }

      console.log(`üì• Completed streaming response from ${agentConfig.name}`)

      // Ajouter la r√©ponse compl√®te √† l'historique
      this.addToChatHistory(agentId, {
        role: 'assistant',
        content: fullResponse,
        timestamp: new Date()
      })

    } catch (error) {
      console.error(`‚ùå Error in streaming message to agent ${agentConfig.name}:`, error)
      throw error
    } finally {
      this.activeRequests.delete(requestId)
    }
  }

  updateLikejustPrompt(newPrompt: string): void {
    this.updateAgentConfig('1', { systemPrompt: newPrompt })
  }

  updateLikejustConfig(updates: Partial<AgentConfig>): void {
    this.updateAgentConfig('1', updates)
  }

  getLikejustConfig(): AgentConfig | null {
    return this.getAgentConfig('1')
  }

  async coordinateAgents(request: CoordinationRequest): Promise<CoordinationResult> {
    console.log('üé≠ Starting agent coordination:', request)
    
    const startTime = Date.now()
    const agentResponses: AgentResponse[] = []
    
    // S√©lectionner les agents √† coordonner
    const agentsToCoordinate = request.selectedAgents.length > 0 
      ? request.selectedAgents 
      : Array.from(this.agentConfigs.keys()).filter(id => id !== '1') // Tous sauf Likejust lui-m√™me
    
    // Obtenir les r√©ponses de chaque agent s√©lectionn√©
    const responsePromises = agentsToCoordinate.map(async (agentId) => {
      try {
        const agentConfig = this.getAgentConfig(agentId)
        if (!agentConfig) return null
        
        // Simuler la r√©ponse de l'agent
        const mockResponse = this.generateMockResponse(agentConfig, request.message)
        
        return {
          agentId,
          agentName: agentConfig.name,
          response: mockResponse,
          confidence: Math.random() * 0.3 + 0.7, // 70-100% de confiance
          specialties: agentConfig.specialties || [],
          timestamp: new Date()
        }
      } catch (error) {
        console.error(`‚ùå Error getting response from agent ${agentId}:`, error)
        return null
      }
    })
    
    const responses = await Promise.all(responsePromises)
    const validResponses = responses.filter((r): r is AgentResponse => r !== null)
    
    // Synth√©tiser les r√©ponses
    const finalResponse = this.synthesizeResponses(validResponses, request)
    
    const processingTime = Date.now() - startTime
    
    const result: CoordinationResult = {
      finalResponse,
      participatingAgents: validResponses.map(r => r.agentId),
      coordinationMethod: this.getCoordinationMethod(request.coordinationMode),
      confidence: this.calculateOverallConfidence(validResponses),
      processingTime
    }
    
    console.log('üé≠ Coordination completed:', result)
    return result
  }
  
  private synthesizeResponses(responses: AgentResponse[], request: CoordinationRequest): string {
    if (responses.length === 0) {
      return "ü§ñ D√©sol√©, je n'ai pas pu coordonner les agents pour r√©pondre √† votre demande."
    }
    
    if (responses.length === 1) {
      return `üé≠ En tant que chef d'orchestre, j'ai s√©lectionn√© ${responses[0].agentName} pour r√©pondre √† votre demande. Voici sa r√©ponse:\n\n${responses[0].response}`
    }
    
    // Synth√®se multiple
    const synthesisParts = [
      `üé≠ En tant que chef d'orchestre de la Matrix, j'ai coordonn√© ${responses.length} agents pour vous fournir une r√©ponse optimale:`,
      '',
      '**Agents participants:**'
    ]
    
    // Ajouter les contributions de chaque agent
    responses.forEach((response, index) => {
      synthesisParts.push(
        `${index + 1}. **${response.agentName}** (${response.specialties.join(', ')}):`,
        `   ${response.response}`,
        ''
      )
    })
    
    // Ajouter la synth√®se finale selon le style demand√©
    synthesisParts.push('**Synth√®se finale:**')
    
    switch (request.responseStyle) {
      case 'technical':
        synthesisParts.push('Approche technique combin√©e avec une analyse structur√©e et des solutions pratiques.')
        break
      case 'philosophical':
        synthesisParts.push('Perspective philosophique int√©gr√©e avec une profonde r√©flexion sur les implications.')
        break
      case 'practical':
        synthesisParts.push('Solution pratique ax√©e sur l\'efficacit√© et l\'application imm√©diate.')
        break
      default:
        synthesisParts.push('Approche √©quilibr√©e int√©grant les multiples perspectives pour une r√©ponse compl√®te.')
    }
    
    return synthesisParts.join('\n')
  }
  
  private getCoordinationMethod(mode: string): string {
    switch (mode) {
      case 'auto': return 'S√©lection automatique des agents les plus pertinents'
      case 'manual': return 'Coordination manuelle des agents pr√©d√©finis'
      case 'hybrid': return 'Approche hybride avec s√©lection optimis√©e'
      default: return 'Coordination standard'
    }
  }
  
  private calculateOverallConfidence(responses: AgentResponse[]): number {
    if (responses.length === 0) return 0
    
    const avgConfidence = responses.reduce((sum, r) => sum + r.confidence, 0) / responses.length
    const diversityBonus = Math.min(responses.length * 0.05, 0.2) // Bonus pour la diversit√©
    
    return Math.min(avgConfidence + diversityBonus, 1.0)
  }

  async sendMessageWithCoordination(
    agentId: string,
    message: string,
    coordinationRequest?: CoordinationRequest
  ): Promise<string> {
    // Si c'est Likejust et qu'une demande de coordination est fournie
    if (agentId === '1' && coordinationRequest) {
      const result = await this.coordinateAgents(coordinationRequest)
      return result.finalResponse
    }
    
    // Sinon, utiliser la m√©thode standard
    return this.sendMessage(agentId, message)
  }

  abortRequest(requestId: string): void {
    const abortController = this.activeRequests.get(requestId)
    if (abortController) {
      abortController.abort()
      this.activeRequests.delete(requestId)
      console.log(`‚èπÔ∏è Aborted request ${requestId}`)
    }
  }

  abortAllRequests(): void {
    console.log(`‚èπÔ∏è Aborting all active requests (${this.activeRequests.size} requests)`)
    for (const [requestId, abortController] of this.activeRequests) {
      abortController.abort()
    }
    this.activeRequests.clear()
  }

  getChatHistory(agentId: string): ChatMessage[] {
    return this.chatHistories.get(agentId) || []
  }

  clearChatHistory(agentId: string): void {
    this.chatHistories.delete(agentId)
    console.log(`üóëÔ∏è Cleared chat history for agent ${agentId}`)
  }

  clearAllChatHistory(): void {
    this.chatHistories.clear()
    console.log('üóëÔ∏è Cleared all chat histories')
  }

  getAgentStatus(agentId: string): { available: boolean; name: string; model: string } {
    const config = this.getAgentConfig(agentId)
    return {
      available: !!config,
      name: config?.name || 'Inconnu',
      model: config?.model || 'inconnu'
    }
  }

  getAllAgents(): Array<{ id: string; name: string; model: string; available: boolean }> {
    return Array.from(this.agentConfigs.entries()).map(([id, config]) => ({
      id,
      name: config.name,
      model: config.model,
      available: this.isInitialized
    }))
  }

  getStats(): {
    initialized: boolean
    totalAgents: number
    activeRequests: number
    totalChatHistories: number
    totalMessages: number
  } {
    const totalMessages = Array.from(this.chatHistories.values())
      .reduce((sum, history) => sum + history.length, 0)

    return {
      initialized: this.isInitialized,
      totalAgents: this.agentConfigs.size,
      activeRequests: this.activeRequests.size,
      totalChatHistories: this.chatHistories.size,
      totalMessages
    }
  }

  // M√©thode publique pour mettre √† jour la configuration d'un agent
  public updateAgentConfig(agentId: string, updates: Partial<AgentConfig>): void {
    this.updateAgentConfig(agentId, updates)
  }
}

// Exporter une instance singleton
export const aiServiceClient = new AIServiceClient()
export default AIServiceClient